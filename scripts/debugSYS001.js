#!/usr/bin/env node

/**
 * Debug SYS_001 Error
 * 
 * This script helps debug the SYS_001 internal server error
 */

const https = require('https');
const http = require('http');

console.log('üîç Debugging SYS_001 Error\n');

// Test Firebase Functions
async function testFirebaseFunctions() {
  console.log('1Ô∏è‚É£ Testando Firebase Functions...');
  
  const functions = [
    'validateAdminInitialization',
    'initializeDefaultAdmin'
  ];

  for (const func of functions) {
    try {
      const url = `https://us-central1-curva-mestra.cloudfunctions.net/${func}`;
      const data = JSON.stringify({ data: {} });
      
      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': data.length
        }
      };

      const response = await new Promise((resolve, reject) => {
        const req = https.request(url, options, (res) => {
          let body = '';
          res.on('data', (chunk) => body += chunk);
          res.on('end', () => resolve({ status: res.statusCode, body }));
        });
        
        req.on('error', reject);
        req.write(data);
        req.end();
      });

      if (response.status === 200) {
        console.log(`‚úÖ ${func}: OK`);
      } else {
        console.log(`‚ùå ${func}: Status ${response.status}`);
        console.log(`   Response: ${response.body}`);
      }
    } catch (error) {
      console.log(`‚ùå ${func}: Error - ${error.message}`);
    }
  }
}

// Test local development server
async function testLocalServer() {
  console.log('\n2Ô∏è‚É£ Testando servidor local...');
  
  try {
    const response = await new Promise((resolve, reject) => {
      const req = http.request('http://localhost:3000', { method: 'GET' }, (res) => {
        let body = '';
        res.on('data', (chunk) => body += chunk);
        res.on('end', () => resolve({ status: res.statusCode, body }));
      });
      
      req.on('error', reject);
      req.setTimeout(5000, () => reject(new Error('Timeout')));
      req.end();
    });

    if (response.status === 200) {
      console.log('‚úÖ Servidor local: OK');
      
      // Check for SYS_001 in response
      if (response.body.includes('SYS_001')) {
        console.log('üö® SYS_001 encontrado na resposta do servidor local!');
      }
    } else {
      console.log(`‚ùå Servidor local: Status ${response.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Servidor local: ${error.message}`);
    console.log('   Certifique-se de que o servidor est√° rodando em http://localhost:3000');
  }
}

// Check common causes of SYS_001
function checkCommonCauses() {
  console.log('\n3Ô∏è‚É£ Verificando causas comuns do SYS_001...');
  
  const causes = [
    {
      name: 'Configura√ß√£o Firebase',
      check: () => {
        const fs = require('fs');
        const path = require('path');
        
        const envPath = path.join(__dirname, '../frontend/.env');
        if (fs.existsSync(envPath)) {
          const env = fs.readFileSync(envPath, 'utf8');
          if (env.includes('VITE_FIREBASE_API_KEY') && env.includes('VITE_FIREBASE_PROJECT_ID')) {
            return { ok: true, message: 'Configura√ß√£o Firebase presente' };
          }
        }
        return { ok: false, message: 'Configura√ß√£o Firebase ausente ou incompleta' };
      }
    },
    {
      name: 'Servidor de desenvolvimento',
      check: () => {
        // This would be checked by testLocalServer
        return { ok: true, message: 'Verificado separadamente' };
      }
    },
    {
      name: 'Depend√™ncias Node.js',
      check: () => {
        const fs = require('fs');
        const path = require('path');
        
        const packagePath = path.join(__dirname, '../frontend/package.json');
        if (fs.existsSync(packagePath)) {
          return { ok: true, message: 'package.json encontrado' };
        }
        return { ok: false, message: 'package.json n√£o encontrado' };
      }
    }
  ];

  causes.forEach(cause => {
    try {
      const result = cause.check();
      if (result.ok) {
        console.log(`‚úÖ ${cause.name}: ${result.message}`);
      } else {
        console.log(`‚ùå ${cause.name}: ${result.message}`);
      }
    } catch (error) {
      console.log(`‚ùå ${cause.name}: Erro ao verificar - ${error.message}`);
    }
  });
}

// Provide troubleshooting steps
function provideTroubleshootingSteps() {
  console.log('\n4Ô∏è‚É£ Passos para resolver SYS_001:');
  console.log('');
  console.log('üìã Se o erro aparece no navegador:');
  console.log('   1. Abra o Console do Desenvolvedor (F12)');
  console.log('   2. V√° para a aba Console');
  console.log('   3. Procure por erros em vermelho');
  console.log('   4. V√° para a aba Network');
  console.log('   5. Recarregue a p√°gina e veja se h√° requisi√ß√µes falhando');
  console.log('');
  console.log('üîß Solu√ß√µes comuns:');
  console.log('   ‚Ä¢ Limpar cache do navegador (Ctrl+Shift+R)');
  console.log('   ‚Ä¢ Verificar se o servidor est√° rodando (npm run dev)');
  console.log('   ‚Ä¢ Verificar configura√ß√£o Firebase no .env');
  console.log('   ‚Ä¢ Verificar se h√° erros de CORS');
  console.log('   ‚Ä¢ Verificar se as fun√ß√µes Firebase est√£o deployadas');
  console.log('');
  console.log('üÜò Se o problema persistir:');
  console.log('   ‚Ä¢ Verifique os logs do Firebase: firebase functions:log');
  console.log('   ‚Ä¢ Teste as APIs diretamente com curl ou Postman');
  console.log('   ‚Ä¢ Verifique se h√° problemas de rede ou firewall');
}

// Main execution
async function main() {
  await testFirebaseFunctions();
  await testLocalServer();
  checkCommonCauses();
  provideTroubleshootingSteps();
  
  console.log('\n‚úÖ Debug conclu√≠do. Verifique os resultados acima.');
}

main().catch(console.error);